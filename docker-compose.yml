services:
  userservice:
    build:
      context: .
      dockerfile: UserServiceAPI/Dockerfile
    ports:
      - "48001:8080"
    environment:
      - PRODUCTSERVICE_URL=http://productservice:8080
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - app_network

  productservice:
    build:
      context: .
      dockerfile: ProductServiceAPI/Dockerfile
    ports:
      - "48002:8080"
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s

  postgres:
    image: postgres:17
    container_name: inno-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app_network:
    driver: bridge
